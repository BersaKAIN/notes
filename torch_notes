# Tensor
[Tensor Document](https://github.com/torch/torch7/blob/master/doc/tensor.md)

````
t = torch.Tensor(<dimensions>)

--- creation of a 4D-tensor 4x5x6x2
z = torch.Tensor(4,5,6,2)
--- for more dimensions, (here a 6D tensor) one can do:
s = torch.LongStorage(6)
s[1] = 4; s[2] = 5; s[3] = 6; s[4] = 2; s[5] = 7; s[6] = 3;
x = torch.Tensor(s)
````

`nDim()` and `nDimension()` can be used to get the dimension for a Tensor

The actually data of the Tensor is stored in the storage (accessed by `storage()`).


````
x = torch.Tensor(7,7,7)
x[3][4][5]
is equivalent to
x:storage()[x:storageOffset() + (3-1)*stride(1) + (4-1)*stride(2) + (5-1)*stride(3)]
````

Each row of a tensor (elements in a tensor with all subscripts same except for the last one) are using continuous chunk of the memory. Thus the type of the elements of a tensor do matter. By default `torch.DoubleTensor` is used but you can set it to other type. (Choosing from double float short unsigned signed int)

All tensor operations in this class do not make any memory copy. All these methods transform the existing tensor, or return a new tensor referencing the same storage.
And to really make a copy of a tensor:
````
y = torch.Tensor(x:size()):copy(x)
y = x:clone()
````

[TODO:](https://github.com/torch/torch7/blob/master/doc/tensor.md#tensor-typeastensor)


# Math
[Math Document](https://github.com/torch/torch7/blob/master/doc/maths.md)


